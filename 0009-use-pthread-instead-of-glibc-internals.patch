From bd9c4ee63eb262d12c9473210ba2567258876925 Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Thu, 6 Jan 2022 23:05:59 +0100
Subject: [PATCH 09/18] use pthread instead of glibc internals

---
 src/basic/process-util.c | 12 ++----------
 1 file changed, 2 insertions(+), 10 deletions(-)

diff --git a/src/basic/process-util.c b/src/basic/process-util.c
index c971852158..f652718924 100644
--- a/src/basic/process-util.c
+++ b/src/basic/process-util.c
@@ -1,5 +1,6 @@
 /* SPDX-License-Identifier: LGPL-2.1-or-later */
 
+#include <pthread.h>
 #include <ctype.h>
 #include <errno.h>
 #include <limits.h>
@@ -1161,11 +1162,6 @@ void reset_cached_pid(void) {
         cached_pid = CACHED_PID_UNSET;
 }
 
-/* We use glibc __register_atfork() + __dso_handle directly here, as they are not included in the glibc
- * headers. __register_atfork() is mostly equivalent to pthread_atfork(), but doesn't require us to link against
- * libpthread, as it is part of glibc anyway. */
-extern int __register_atfork(void (*prepare) (void), void (*parent) (void), void (*child) (void), void *dso_handle);
-extern void* __dso_handle _weak_;
 
 pid_t getpid_cached(void) {
         static bool installed = false;
@@ -1190,11 +1186,7 @@ pid_t getpid_cached(void) {
                 new_pid = raw_getpid();
 
                 if (!installed) {
-                        /* __register_atfork() either returns 0 or -ENOMEM, in its glibc implementation. Since it's
-                         * only half-documented (glibc doesn't document it but LSB does â€” though only superficially)
-                         * we'll check for errors only in the most generic fashion possible. */
-
-                        if (__register_atfork(NULL, NULL, reset_cached_pid, __dso_handle) != 0) {
+                        if (pthread_atfork(NULL, NULL, reset_cached_pid) != 0) {
                                 /* OOM? Let's try again later */
                                 cached_pid = CACHED_PID_UNSET;
                                 return new_pid;
-- 
2.34.1

